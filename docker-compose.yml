version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    platform: linux/amd64
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 3

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    platform: linux/amd64
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server kafka:29092 --list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  schema-registry:
    image: confluentinc/cp-schema-registry:7.4.0
    container_name: schema-registry
    platform: linux/amd64
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8083:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'kafka:29092'
      
  postgres:
    image: postgres:15
    container_name: marinepollution-postgres
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: marine
      POSTGRES_PASSWORD: marinepw
      POSTGRES_DB: marinets
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U marine -d marinets"]
      interval: 10s
      timeout: 5s
      retries: 3

  redis:
    image: redis:7.0-alpine
    container_name: marinepollution-redis
    platform: linux/amd64
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  minio:
    image: minio/minio
    container_name: marinepollution-minio
    platform: linux/amd64
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  setup-minio:
    image: minio/mc
    container_name: setup-minio
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc config host add myminio http://minio:9000 minioadmin minioadmin;
      /usr/bin/mc mb myminio/marine-bronze;
      /usr/bin/mc mb myminio/marine-silver;
      /usr/bin/mc mb myminio/marine-gold;
      exit 0;
      "

  setup-kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: setup-kafka
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic buoy_raw --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic satellite_imagery_raw --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic water_metrics_raw --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic gold_buoy_data --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic gold_satellite_data --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic gold_water_data --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic pollution_hotspots --partitions 3 --replication-factor 1;
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic sensor_alerts --partitions 3 --replication-factor 1;
      exit 0;
      "

  buoy-producer:
    build:
      context: ./buoy_producer
    container_name: buoy-producer
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    environment:
      KAFKA_BROKER: kafka:29092
      POLL_INTERVAL: 300  # 5 minuti

  satellite-producer:
    build:
      context: ./satellite_producer
    container_name: satellite-producer
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: always
    environment:
      KAFKA_BROKER: kafka:29092
      POLL_INTERVAL: 600  # 10 minuti
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin

  water-metrics-producer:
    build:
      context: ./water_metrics_producer
    container_name: water-metrics-producer
    depends_on:
      kafka:
        condition: service_healthy
    restart: always
    environment:
      KAFKA_BROKER: kafka:29092
      POLL_INTERVAL: 300  # 5 minuti

  flink-jobmanager:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: flink-jobmanager
    ports:
      - "8082:8081"
    command: jobmanager
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy

  flink-taskmanager:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    environment:
      FLINK_PROPERTIES: "jobmanager.rpc.address: flink-jobmanager"
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro

  buoy-flink-job:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: buoy-flink-job
    depends_on:
      - flink-jobmanager
      - buoy-producer
    command: bash -c "cd /opt/flink/usrlib/flink_jobs/buoy_job && python main.py"
    environment:
      KAFKA_BROKER: kafka:29092
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro

  satellite-flink-job:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: satellite-flink-job
    depends_on:
      - flink-jobmanager
      - satellite-producer
      - minio
    command: bash -c "cd /opt/flink/usrlib/flink_jobs/satellite_job && python main.py"
    environment:
      KAFKA_BROKER: kafka:29092
      MINIO_HOST: minio
      MINIO_PORT: 9000
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro

  water-metrics-flink-job:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: water-metrics-flink-job
    depends_on:
      - flink-jobmanager
      - water-metrics-producer
    command: bash -c "cd /opt/flink/usrlib/flink_jobs/water_metrics_job && python main.py"
    environment:
      KAFKA_BROKER: kafka:29092
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro

  hotspot-flink-job:
    build:
      context: ./docker/flink-python
    platform: linux/amd64
    image: marinepollution/flink-python:1.17
    container_name: hotspot-flink-job
    depends_on:
      - flink-jobmanager
      - buoy-flink-job
      - satellite-flink-job
      - water-metrics-flink-job
    command: bash -c "cd /opt/flink/usrlib/flink_jobs/hotspot_job && python main.py"
    environment:
      KAFKA_BROKER: kafka:29092
    volumes:
      - ./flink_jobs:/opt/flink/usrlib/flink_jobs:ro

  postgres-consumer:
    build:
      context: ./consumers/postgres_consumer
    container_name: postgres-consumer
    depends_on:
      - postgres
      - kafka
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:29092
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: marinets
      POSTGRES_USER: marine
      POSTGRES_PASSWORD: marinepw

  hotspot-consumer:
    build:
      context: ./consumers/hotspot_consumer
    container_name: hotspot-consumer
    depends_on:
      - kafka
      - redis
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0

  alert-consumer:
    build:
      context: ./consumers/alert_consumer
    container_name: alert-consumer
    depends_on:
      - kafka
      - redis
    restart: on-failure
    environment:
      KAFKA_BROKER: kafka:29092
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_DB: 0

volumes:
  postgres_data:
  minio_data: